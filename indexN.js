import puppeteer from 'puppeteer';

class Scrapper {


    constructor(url = 'https://www.inmuebles24.com/terrenos-en-venta-en-santiago.html') {
        
        this.baseUrl = url;

    }

    async getBrowser() {
        
        const AUTH = 'brd-customer-hl_e2e52c3f-zone-land2:z7eu86vq6glq';
        const SBR_WS_ENDPOINT = `wss://${AUTH}@brd.superproxy.io:9222`;
        var bright = 1;

        if(bright==1){ //esto es para pder cambiar de local a bright mas rapido
        console.log("b",bright)
            return await puppeteer.connect({
                browserWSEndpoint: SBR_WS_ENDPOINT,
                headless: 'new',
                // headless: false,

            });
        }else{   
            return await puppeteer.launch({
                headless: "new",
                defaultViewport : null
            });
        }
        

    }
    helperFunction = async (newBaseUrl, elements) => {
        var tempData = [];
        // Extracting and logging the text content of each element
        for (const element of elements) {
            // console.log('element',element)sc-i1odl-0
            const identity = await element.$(".sc-i1odl-0") ?? ''
            const id = await identity?.evaluate(node => node.getAttribute('data-id')) ?? '';
            if (id == undefined || id == null) return '';
    
            const title = await element.$('.sc-ge2uzh-0') ?? ''
            const t = await title?.evaluate(node => node.innerText) ?? '';
    
            const location = await element.$(".sc-ge2uzh-2") ?? ''
            const l = await location?.evaluate(node => node.innerText) ?? '';
    
            const description = await element.$(".sc-i1odl-11") ?? ''
            const d = await description?.evaluate(node => node.innerText) ?? '';
    
            const price = await element.$('.sc-12dh9kl-3') ?? ''
            const r = await price?.evaluate(node => node.innerText) ?? ''
            const dollar = r?.includes("USD") ? 18 : 1;
            // console.log('d', dollar)
            const formattedPricing = r?.replaceAll("MN", "")?.replaceAll(",", "")?.replaceAll("USD", "")?.trim();
    
            const di = await element.$('.sc-1uhtbxc-0') ?? ''
            const dimedimensionsCard = await di?.evaluate(node => node.innerText) ?? ''
    
            let formattedMeter = dimedimensionsCard?.trim();
            if (formattedMeter.includes("m²")) {
                formattedMeter = parseFloat(formattedMeter.replaceAll("m²", "").trim());
            } else if (formattedMeter.includes("ha")) {
                formattedMeter = parseFloat(formattedMeter.replaceAll("ha", "").trim()) * 10000;
            }
    
            const pricingPerMeter = formattedPricing / (formattedMeter * dollar);
    
            // const elementText = await page.evaluate(element => element.$eval('sc-12dh9kl-3 iqNJlX',node => node.innerText), element);
            tempData.push({
                'page': newBaseUrl,
                'id': id,
                'title': t,
                'pricing': formattedPricing,
                'location': l,
                'description': d,
                'm2': formattedMeter ?? 1,
                'pricingPerMeter': pricingPerMeter ?? 0
            });
           
    
        }
        // console.log('tempData', tempData, tempData.length)
        return tempData
    }
    async execute() {
        try {
            // console.log('br',this.getBrowser())
            var browser = await this.getBrowser();
            var page = await browser.newPage();
            
            
            //await page.setRequestInterception(true);

            /**
            page.on('request', (req) => {
                if(req.resourceType() === 'image'){
                    req.abort();
                }
                else {
                    req.continue();
                }
            });
            **/
            
            var currentPageLoop = 1;
            var newBaseUrl;


            newBaseUrl = `${this.baseUrl.split('.html')[0]}-pagina-9999.html`;
            await page.goto(newBaseUrl, { waitUntil: "domcontentloaded", timeout: 0 });
            var url = page.url();
            var pagination = url.match(/-pagina-(\d+)\.html/);//regresa un array y el index 1 es el numero
            var returnData ;
            for (let i = 1; i < parseInt(pagination[1])+1; i++) {
                console.log('i',i)
                newBaseUrl = `${this.baseUrl.split('.html')[0]}-pagina-${i}.html`;
                console.log("currentPageLoop", newBaseUrl)
                    try {
                        await page.goto(newBaseUrl, { waitUntil: "domcontentloaded", timeout: 100000 });
                        // setTarget({ status: true })
                        // Waiting for a specific element to be generated by JavaScript
                        await page.waitForSelector('.sc-1tt2vbg-5');

                        const elements = await page.$$('.sc-1tt2vbg-5');
                        // console.log('elements', elements.length)
                        // setTarget({ status: false })

                        returnData =  await this.helperFunction(newBaseUrl, elements)

                    } catch (error) {
                        console.log("trycatch1", error)
                    }

                // }else{
                //     let p = await browser.newPage();
                //     setTarget({ status: true })

                //     await p.goto(newBaseUrl, { waitUntil: 'load',timeout: 100000 });
                //     await p.waitForSelector('.sc-1tt2vbg-5');
                //     const elements = await p.$$('.sc-1tt2vbg-5');
                //     console.log('elements', elements.length)
                //     await helperFunction(newBaseUrl, elements)
                //     setTarget({ status: false })

                // }
            }
            /////////////////////////////
            //while(currentPageLoop <= pagination[1]) {
            // while(currentPageLoop <= 2) {
            //     newBaseUrl = `${this.baseUrl.split('.html')[0]}-pagina-${currentPageLoop}.html`;
            //     console.log("cur",newBaseUrl)

            //     await page.goto(newBaseUrl, { waitUntil: "domcontentloaded", timeout: 0 });

            //     // await page.waitForFunction(
            //     //     'window.performance.timing.loadEventEnd - window.performance.timing.navigationStart >= 10000'
            //     // );
            //     await page.waitForSelector('.sc-1tt2vbg-5');
            //     const elements = await page.$$('.sc-1tt2vbg-5');

            //     // Extracting and logging the text content of each element
            //     for (const element of elements) {
            //         const elementText = await page.evaluate(element => element.textContent, element);
            //         console.log('Extracted element:', elementText);
            //     }
            //     var data = await page.evaluate((currentPage) => {
            //         console.log("cur",currentPage)
            //         var tempData = [];
            //         document.querySelectorAll('.sc-1tt2vbg-4').forEach((div) => {
            //             const id = div.querySelector(".crUUno")?.getAttribute('data-id');
            //             console.log("id",id)

            //             if (id == undefined || id == null) return;

            //             const card = div.querySelector(".sc-i1odl-3");
            //             const descriptionCard = card.querySelector('div');
            //             const title = descriptionCard.querySelector('.eXwAuU');
            //             const pricing = descriptionCard.querySelector(".hbUMaO");
            //             const location = descriptionCard.querySelector(".jneaYd");
            //             const description = descriptionCard.querySelector(".EWzaP");
            //             const dimedimensionsCard = div.querySelector('.hpNmeK')
            //                                                 ?.querySelector('span')
            //                                                 ?.querySelector('span')
            //                                                 ?.innerHTML?.replaceAll(/<\!--.*?-->/g, "")
            //                                                 ?.trim();

            //             const dollar = pricing?.innerHTML?.includes("USD") ? 18 : 1;
            //             console.log('d',dollar)
            //             const formattedPricing = pricing?.innerHTML?.replaceAll("MN", "")?.replaceAll(",", "")?.replaceAll("USD", "")?.trim();

            //             let formattedMeter = dimedimensionsCard?.trim();
            //             if (formattedMeter.includes("m²")) {
            //                 formattedMeter = parseFloat(formattedMeter.replaceAll("m²", "").trim());
            //             } else if (formattedMeter.includes("ha")) {
            //                 formattedMeter = parseFloat(formattedMeter.replaceAll("ha", "").trim()) * 10000;
            //             }

            //             const pricingPerMeter = formattedPricing / (formattedMeter * dollar);

            //             tempData.push({
            //                 'page': currentPage,
            //                 'id': id,
            //                 'title': title?.innerHTML,
            //                 'pricing': formattedPricing,
            //                 'location': location?.innerHTML,
            //                 'description': description?.innerHTML,
            //                 'm2': formattedMeter??1,
            //                 'pricingPerMeter': pricingPerMeter??0
            //             });
            //         });
            //         return tempData;
            //     }, currentPageLoop);  // Pasamos currentPageLoop como un argumento a page.evaluate()


            //     console.log("data",data);

            //     if(data.length > 0){
            //         return data;
            //     }

            //     currentPageLoop++;
            // }
            //await browser.close();
            return returnData
        } 
        catch (e) {
            console.error(e.message);
        }

    }
    

}

(async () => {
    var url = process.argv[2];
    var scrapper = new Scrapper(url);
    scrapper.execute();
})().catch(e => { console.log(e) });
